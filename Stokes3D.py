# Name : Stokes3D.py
# Author : Emile Soutter
# Use : simple 3D experiment to compute and check the solution of a Stokes experiment, with (possibly) non homogeneous given density.
from __future__ import print_function
from fenics import *
import numpy as np
import matplotlib.pyplot as plt
from mshr import*
from ufl import transpose
import scipy.io as sio
import os.path
from dolfin import*
import pdb
import os
import petsc4py
from petsc4py import PETSc
import gc
def boundary(x):
    tol = 1E-12
    return abs(x[0]) < tol or abs(x[1]) < tol \
        or abs(x[0] - 1) < tol or abs(x[1] - 1) < tol \
        or abs(x[2] - 1) < tol or abs(x[2]) < tol
def ComputeSolution(N,A_tot,L,bcs,V,Monitor=True,use_petsc=True):
    u1=Function(V)
    MAX_ITERS = 10000;
    if(use_petsc):
        PETScOptions.set("ksp_max_it", MAX_ITERS)
        PETScOptions.set("ksp_rtol", 1e-8)
        PETScOptions.set("ksp_atol", 1e-10)
        PETScOptions.set("ksp_view")
        PETScOptions.set("ksp_converged_reason")
        PETScOptions.set("ksp_monitor_true_residual")
        PETScOptions.set("ksp_type", "gmres")
        PETScOptions.set("pc_type", "ilu")
        PETScOptions.set("pc_factor_levels", 1)
        PETScOptions.set("ksp_gmres_restart", 150)
        (A, B) = assemble_system(A_tot, L, bcs)
        solver = PETScKrylovSolver()
        solver.set_from_options()
        solver.solve(A, u1.vector(), B)
    else:
        parms = parameters["krylov_solver"]
        parms["relative_tolerance"]=5.e-6;
        #parms["absolute_tolerance"]=1.e-7;
        parms["maximum_iterations"]=MAX_ITERS;
        parms["monitor_convergence"]=Monitor;
        solver = PETScKrylovSolver('gmres','none')
        #solver.ksp().setGMRESRestart(MAX_ITERS)
        if(N<2000):
            solve(A_tot==L, u1, bcs,solver_parameters={"linear_solver": "gmres","preconditioner": "ilu","krylov_solver": parms})
        else:
            solve(A_tot==L, u1, bcs,solver_parameters={"linear_solver": "tfqmr","preconditioner": "hypre_euclid","krylov_solver": parms})
    return u1
def epsilon(u):
    return 0.5*(nabla_grad(u) + nabla_grad(u).T)
def Compute_StokesSolution3D(N,Amplirho=0.0,gammarho=1.0,rhol=1.0,mu=1.0,AmpliR=1.0,AmpliP=1.0,degree=10,savefiles=0,plotopt=0,displayexact=0,order=1,degree_int=3):
    deltas= 2.0;
    dimens=3.0;
    facto_dimens=1/dimens;
    print(" | | | Computation of stokes with value N= %.15g" % N);
    print(" | | | Maximum value of density is  %.15g" % rhol);
    print(" | | | Maximum value of the variation of the density is  %.15g" % Amplirho);
    mesh=UnitCubeMesh(N,N,N);
    #----------------PHYSICAL PARAMETERS-----------------
    # Create mesh and boundaries in Fenics format
    # -------------------------------------------
    h=CellDiameter(mesh)
    n = FacetNormal(mesh)
    zero=Constant(0.)
    #--------------------FUNCTION SPACE---------------------
    # 3 spaces : Vr for the velocity, Qr for the pressure and R for the constraint on the pressure (integral of p over Omega is zero, imposed via Lagrangian multiplier)
    Vr  = VectorElement("CG", mesh.ufl_cell(),order, dim=int(dimens))
    Qr  = FiniteElement("CG", mesh.ufl_cell(),1)
    R=FiniteElement("R",mesh.ufl_cell(),0)
    V   = FunctionSpace(mesh, MixedElement([Vr,Qr,R]))
    u,phi= TrialFunction(V), TestFunction(V)
    u_r,p_r,lambda_r=split(u)
    v_r,q_r,mu_r=split(phi)
    #--------------------BOUNDARY CONDITIONS---------------------
    # Exact analytical expressions for u on the boundary, alternatively can be set to zero in this case.
    u_D1 = Expression(("0.0"), degree=2)
    bc1 = DirichletBC(V.sub(0).sub(0), u_D1, boundary)
    bc2 = DirichletBC(V.sub(0).sub(1), u_D1, boundary)
    bc3 = DirichletBC(V.sub(0).sub(2), u_D1, boundary)
    bc4 = DirichletBC(V.sub(2), zero, boundary)
    bcs=[bc1,bc2,bc3,bc4]
    #bcs=[bc3]
    #--------------------DATA OF PROBLEM---------------------
    # Non-trivial expression for the analytical force in the rhs, pressure the solution is p=xy-1/4
    # Expression of the variable density
    rhoexpr=Expression(("(rhol-Amplirho*(0.5*tanh(gammarho*(x[2]-0.5))+0.5))","(rhol-Amplirho*(0.5*tanh(gammarho*(x[2]-0.5))+0.5))","(rhol-Amplirho*(0.5*tanh(gammarho*(x[2]-0.5))+0.5))","(rhol-Amplirho*(0.5*tanh(gammarho*(x[2]-0.5))+0.5))","0.0"),rhol=rhol,Amplirho=Amplirho,gammarho=gammarho,degree=degree)
    rhof=Function(V)
    rhof.interpolate(rhoexpr)
    rhophantom1,rho,rhophantom2l=rhof.split()
    #Exact expression directly imported from maple. (Huge analytical expression)
    forceexpr = Expression(("""-0.2e1 * mu * ((-0.32e2 * AmpliR * x[0] * pow(x[1], 0.3e1) * x[2] - 0.48e2 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.4e1) + 0.64e2 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.3e1) - 0.16e2 * AmpliR * x[0] * x[1] * pow(x[2], 0.4e1) + 0.32e2 * AmpliR * x[0] * x[1] * pow(x[2], 0.3e1) - 0.16e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * x[2] + 0.32e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * x[2] + 0.16e2 * AmpliR * x[0] * pow(x[1], 0.4e1) * x[2] + 0.16e2 * AmpliR * x[2] * x[1] * x[1] * x[0] + 0.8e1 / 0.3e1 * AmpliR * x[2] * x[2] * x[1] - 0.8e1 / 0.3e1 * AmpliR * x[2] * x[1] * x[1] - 0.16e2 * AmpliR * x[2] * x[1] * x[1] * x[0] * x[0] + 0.16e2 * AmpliR * x[2] * x[2] * x[1] * x[0] * x[0] + 0.32e2 / 0.3e1 * AmpliR * x[1] * x[1] * pow(x[2], 0.3e1) + 0.16e2 / 0.3e1 * AmpliR * pow(x[1], 0.3e1) * x[2] - 0.16e2 / 0.3e1 * AmpliR * x[1] * pow(x[2], 0.3e1) - 0.32e2 / 0.3e1 * AmpliR * pow(x[1], 0.3e1) * x[2] * x[2] - 0.8e1 * AmpliR * x[1] * x[1] * pow(x[2], 0.4e1) + 0.8e1 * AmpliR * pow(x[1], 0.4e1) * x[2] * x[2] + 0.8e1 / 0.3e1 * AmpliR * x[1] * pow(x[2], 0.4e1) + 0.16e2 / 0.3e1 * AmpliR * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) - 0.16e2 / 0.3e1 * AmpliR * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) - 0.8e1 / 0.3e1 * AmpliR * pow(x[1], 0.4e1) * x[2] - 0.32e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) + 0.32e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) + 0.48e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * x[2] * x[2] + 0.32e2 * AmpliR * x[0] * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) - 0.32e2 * AmpliR * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) - 0.64e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * x[2] * x[2] + 0.16e2 * AmpliR * x[0] * x[0] * x[1] * pow(x[2], 0.4e1) - 0.48e2 * AmpliR * x[0] * pow(x[1], 0.4e1) * x[2] * x[2] + 0.48e2 * AmpliR * x[0] * x[1] * x[1] * pow(x[2], 0.4e1) - 0.32e2 * AmpliR * x[0] * x[0] * x[1] * pow(x[2], 0.3e1) + 0.64e2 * AmpliR * x[0] * pow(x[1], 0.3e1) * x[2] * x[2] - 0.64e2 * AmpliR * x[0] * x[1] * x[1] * pow(x[2], 0.3e1) - 0.16e2 * AmpliR * x[0] * x[1] * x[2] * x[2]) / (rhol - Amplirho * (tanh(gammarho * (x[2] - 0.5e0)) / 0.2e1 + 0.1e1 / 0.2e1)) + (-0.24e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * pow(x[2], 0.3e1) + 0.12e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * pow(x[2], 0.4e1) + 0.36e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * x[2] * x[2] - 0.6e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[2], 0.4e1) + 0.48e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * pow(x[2], 0.3e1) - 0.24e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * pow(x[2], 0.4e1) - 0.12e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * x[2] - 0.24e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[2] * x[2] + 0.8e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[2], 0.3e1) - 0.72e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * x[2] * x[2] + 0.12e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[2], 0.4e1) - 0.24e2 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.3e1) + 0.12e2 * AmpliR * x[0] * x[0] * x[1] * pow(x[2], 0.4e1) + 0.12e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[2] + 0.24e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * x[2] + 0.48e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[2] * x[2] - 0.16e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[2], 0.3e1) + 0.36e2 * AmpliR * x[2] * x[2] * x[1] * x[1] * x[0] * x[0] - 0.6e1 * AmpliR * x[0] * x[0] * pow(x[2], 0.4e1) - 0.2e1 * AmpliR * pow(x[0], 0.4e1) * x[2] - 0.24e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[2] - 0.12e2 * AmpliR * x[2] * x[1] * x[1] * x[0] * x[0] - 0.24e2 * AmpliR * x[2] * x[2] * x[1] * x[0] * x[0] + 0.8e1 * AmpliR * x[0] * x[0] * pow(x[2], 0.3e1) + 0.4e1 * AmpliR * pow(x[0], 0.3e1) * x[2] + 0.12e2 * AmpliR * x[2] * x[1] * x[0] * x[0] - 0.2e1 * AmpliR * x[0] * x[0] * x[2]) / (rhol - Amplirho * (tanh(gammarho * (x[2] - 0.5e0)) / 0.2e1 + 0.1e1 / 0.2e1)) + (-0.12e2 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.4e1) * x[2] + 0.24e2 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.3e1) * x[2] * x[2] + 0.6e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.4e1) - 0.36e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * x[2] * x[2] + 0.24e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.4e1) * x[2] - 0.48e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * x[2] * x[2] - 0.8e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.3e1) + 0.24e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * x[2] + 0.12e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[2] * x[2] - 0.12e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.4e1) + 0.72e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * x[2] * x[2] - 0.12e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * x[2] + 0.24e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * x[2] * x[2] - 0.12e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[2] + 0.16e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) - 0.48e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * x[2] - 0.24e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[2] * x[2] + 0.6e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) - 0.36e2 * AmpliR * x[2] * x[2] * x[1] * x[1] * x[0] * x[0] + 0.2e1 * AmpliR * pow(x[0], 0.4e1) * x[1] + 0.24e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[2] - 0.8e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) + 0.24e2 * AmpliR * x[2] * x[1] * x[1] * x[0] * x[0] + 0.12e2 * AmpliR * x[2] * x[2] * x[1] * x[0] * x[0] - 0.4e1 * AmpliR * pow(x[0], 0.3e1) * x[1] - 0.12e2 * AmpliR * x[2] * x[1] * x[0] * x[0] + 0.2e1 * AmpliR * x[0] * x[0] * x[1]) / (rhol - Amplirho * (tanh(gammarho * (x[2] - 0.5e0)) / 0.2e1 + 0.1e1 / 0.2e1)) + (-0.12e2 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.4e1) * x[2] * x[2] + 0.16e2 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) + 0.12e2 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.4e1) * x[2] - 0.24e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * pow(x[2], 0.3e1) + 0.24e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.4e1) * x[2] * x[2] - 0.32e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) - 0.2e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.4e1) - 0.16e2 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.3e1) * x[2] + 0.24e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * x[2] * x[2] + 0.8e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * pow(x[2], 0.3e1) - 0.24e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.4e1) * x[2] + 0.48e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * pow(x[2], 0.3e1) - 0.12e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * x[2] * x[2] + 0.16e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) + 0.4e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.3e1) - 0.12e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[2] * x[2] + 0.4e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.4e1) + 0.32e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * x[2] - 0.48e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * x[2] * x[2] - 0.16e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * pow(x[2], 0.3e1) + 0.12e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * x[2] - 0.24e2 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.3e1) - 0.2e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] + 0.4e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[2] - 0.8e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) + 0.24e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[2] * x[2] - 0.2e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) - 0.16e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * x[2] + 0.24e2 * AmpliR * x[2] * x[2] * x[1] * x[1] * x[0] * x[0] + 0.8e1 * AmpliR * x[0] * x[0] * x[1] * pow(x[2], 0.3e1) + 0.4e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] - 0.8e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[2] + 0.4e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) - 0.12e2 * AmpliR * x[2] * x[2] * x[1] * x[0] * x[0] - 0.2e1 * AmpliR * x[0] * x[0] * x[1] * x[1] + 0.4e1 * AmpliR * x[2] * x[1] * x[0] * x[0]) * Amplirho * gammarho * (0.1e1 - pow(tanh(gammarho * (x[2] - 0.5e0)), 0.2e1)) * pow(rhol - Amplirho * (tanh(gammarho * (x[2] - 0.5e0)) / 0.2e1 + 0.1e1 / 0.2e1), -0.2e1) / 0.2e1 + (-0.4e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) + 0.4e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) + 0.6e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.4e1) * x[2] * x[2] - 0.6e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * pow(x[2], 0.4e1) + 0.8e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) - 0.8e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) - 0.2e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.4e1) * x[2] - 0.8e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.3e1) * x[2] * x[2] + 0.8e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * pow(x[2], 0.3e1) + 0.2e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * pow(x[2], 0.4e1) - 0.12e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.4e1) * x[2] * x[2] + 0.12e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * pow(x[2], 0.4e1) - 0.4e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) + 0.4e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) + 0.4e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.3e1) * x[2] - 0.4e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * pow(x[2], 0.3e1) + 0.4e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.4e1) * x[2] + 0.16e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * x[2] * x[2] - 0.16e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * pow(x[2], 0.3e1) - 0.4e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * pow(x[2], 0.4e1) + 0.6e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * x[2] * x[2] - 0.6e1 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.4e1) - 0.2e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * x[2] + 0.2e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[2] * x[2] - 0.8e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * x[2] + 0.8e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * pow(x[2], 0.3e1) - 0.2e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * x[2] - 0.8e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * x[2] * x[2] + 0.8e1 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.3e1) + 0.2e1 * AmpliR * x[0] * x[0] * x[1] * pow(x[2], 0.4e1) + 0.4e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * x[2] - 0.4e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[2] * x[2] + 0.4e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * x[2] - 0.4e1 * AmpliR * x[0] * x[0] * x[1] * pow(x[2], 0.3e1) - 0.2e1 * AmpliR * x[2] * x[1] * x[1] * x[0] * x[0] + 0.2e1 * AmpliR * x[2] * x[2] * x[1] * x[0] * x[0]) * Amplirho * Amplirho * gammarho * gammarho * pow(0.1e1 - pow(tanh(gammarho * (x[2] - 0.5e0)), 0.2e1), 0.2e1) * pow(rhol - Amplirho * (tanh(gammarho * (x[2] - 0.5e0)) / 0.2e1 + 0.1e1 / 0.2e1), -0.3e1) / 0.4e1 - (-0.4e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) + 0.4e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) + 0.6e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.4e1) * x[2] * x[2] - 0.6e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * pow(x[2], 0.4e1) + 0.8e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) - 0.8e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) - 0.2e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.4e1) * x[2] - 0.8e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.3e1) * x[2] * x[2] + 0.8e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * pow(x[2], 0.3e1) + 0.2e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * pow(x[2], 0.4e1) - 0.12e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.4e1) * x[2] * x[2] + 0.12e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * pow(x[2], 0.4e1) - 0.4e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) + 0.4e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) + 0.4e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.3e1) * x[2] - 0.4e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * pow(x[2], 0.3e1) + 0.4e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.4e1) * x[2] + 0.16e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * x[2] * x[2] - 0.16e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * pow(x[2], 0.3e1) - 0.4e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * pow(x[2], 0.4e1) + 0.6e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * x[2] * x[2] - 0.6e1 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.4e1) - 0.2e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * x[2] + 0.2e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[2] * x[2] - 0.8e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * x[2] + 0.8e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * pow(x[2], 0.3e1) - 0.2e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * x[2] - 0.8e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * x[2] * x[2] + 0.8e1 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.3e1) + 0.2e1 * AmpliR * x[0] * x[0] * x[1] * pow(x[2], 0.4e1) + 0.4e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * x[2] - 0.4e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[2] * x[2] + 0.4e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * x[2] - 0.4e1 * AmpliR * x[0] * x[0] * x[1] * pow(x[2], 0.3e1) - 0.2e1 * AmpliR * x[2] * x[1] * x[1] * x[0] * x[0] + 0.2e1 * AmpliR * x[2] * x[2] * x[1] * x[0] * x[0]) * Amplirho * gammarho * gammarho * tanh(gammarho * (x[2] - 0.5e0)) * (0.1e1 - pow(tanh(gammarho * (x[2] - 0.5e0)), 0.2e1)) * pow(rhol - Amplirho * (tanh(gammarho * (x[2] - 0.5e0)) / 0.2e1 + 0.1e1 / 0.2e1), -0.2e1) / 0.2e1 + (0.32e2 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) - 0.16e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * x[2] * x[2] + 0.16e2 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * x[2] - 0.8e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * x[2] + 0.8e1 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[2] + 0.8e1 / 0.3e1 * AmpliR * x[0] * pow(x[1], 0.3e1) * x[2] + 0.12e2 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.4e1) + 0.4e1 * AmpliR * x[0] * x[1] * pow(x[2], 0.4e1) - 0.16e2 / 0.3e1 * AmpliR * x[0] * x[1] * pow(x[2], 0.3e1) - 0.8e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * x[2] + 0.4e1 / 0.3e1 * AmpliR * x[2] * x[1] * x[0] - 0.4e1 * AmpliR * x[2] * x[1] * x[1] * x[0] - 0.4e1 * AmpliR * x[2] * x[1] * x[0] * x[0] - 0.2e1 / 0.3e1 * AmpliR * x[2] * x[2] * x[1] + 0.2e1 * AmpliR * x[2] * x[2] * x[1] * x[1] + 0.12e2 * AmpliR * x[2] * x[1] * x[1] * x[0] * x[0] - 0.24e2 * AmpliR * x[2] * x[2] * x[1] * x[1] * x[0] * x[0] + 0.8e1 * AmpliR * x[2] * x[2] * x[1] * x[0] * x[0] + 0.8e1 / 0.3e1 * AmpliR * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) - 0.4e1 * AmpliR * x[1] * x[1] * pow(x[2], 0.3e1) + 0.4e1 / 0.3e1 * AmpliR * x[1] * pow(x[2], 0.3e1) - 0.4e1 / 0.3e1 * AmpliR * pow(x[1], 0.3e1) * x[2] * x[2] + 0.2e1 * AmpliR * x[1] * x[1] * pow(x[2], 0.4e1) - 0.2e1 / 0.3e1 * AmpliR * x[1] * pow(x[2], 0.4e1) - 0.4e1 / 0.3e1 * AmpliR * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) - 0.8e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) - 0.16e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * pow(x[2], 0.3e1) + 0.8e1 * AmpliR * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) + 0.24e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * x[2] * x[2] + 0.16e2 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * pow(x[2], 0.3e1) + 0.16e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * x[2] * x[2] - 0.4e1 * AmpliR * x[0] * x[0] * x[1] * pow(x[2], 0.4e1) - 0.32e2 / 0.3e1 * AmpliR * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) - 0.12e2 * AmpliR * x[0] * x[1] * x[1] * pow(x[2], 0.4e1) - 0.8e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[2] * x[2] + 0.16e2 * AmpliR * x[0] * x[1] * x[1] * pow(x[2], 0.3e1)) / (rhol - Amplirho * (tanh(gammarho * (x[2] - 0.5e0)) / 0.2e1 + 0.1e1 / 0.2e1)) + (-0.32e2 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) + 0.16e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * x[2] * x[2] - 0.16e2 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * x[2] + 0.8e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * x[2] - 0.8e1 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[2] + 0.16e2 / 0.3e1 * AmpliR * x[0] * pow(x[1], 0.3e1) * x[2] - 0.16e2 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.3e1) - 0.8e1 / 0.3e1 * AmpliR * x[0] * x[1] * pow(x[2], 0.3e1) + 0.4e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * x[2] - 0.4e1 * AmpliR * x[0] * pow(x[1], 0.4e1) * x[2] - 0.4e1 / 0.3e1 * AmpliR * x[2] * x[1] * x[0] + 0.4e1 * AmpliR * x[2] * x[1] * x[0] * x[0] - 0.2e1 * AmpliR * x[2] * x[2] * x[1] * x[1] + 0.2e1 / 0.3e1 * AmpliR * x[2] * x[1] * x[1] - 0.8e1 * AmpliR * x[2] * x[1] * x[1] * x[0] * x[0] + 0.24e2 * AmpliR * x[2] * x[2] * x[1] * x[1] * x[0] * x[0] - 0.12e2 * AmpliR * x[2] * x[2] * x[1] * x[0] * x[0] - 0.8e1 / 0.3e1 * AmpliR * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) + 0.4e1 / 0.3e1 * AmpliR * x[1] * x[1] * pow(x[2], 0.3e1) - 0.4e1 / 0.3e1 * AmpliR * pow(x[1], 0.3e1) * x[2] + 0.4e1 * AmpliR * pow(x[1], 0.3e1) * x[2] * x[2] - 0.2e1 * AmpliR * pow(x[1], 0.4e1) * x[2] * x[2] + 0.4e1 / 0.3e1 * AmpliR * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) + 0.2e1 / 0.3e1 * AmpliR * pow(x[1], 0.4e1) * x[2] + 0.8e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) + 0.16e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * pow(x[2], 0.3e1) - 0.12e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * x[2] * x[2] - 0.8e1 * AmpliR * x[0] * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) - 0.24e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * x[2] * x[2] - 0.16e2 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * pow(x[2], 0.3e1) + 0.12e2 * AmpliR * x[0] * pow(x[1], 0.4e1) * x[2] * x[2] + 0.32e2 / 0.3e1 * AmpliR * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) + 0.8e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[2] * x[2] + 0.8e1 * AmpliR * x[0] * x[0] * x[1] * pow(x[2], 0.3e1) - 0.16e2 * AmpliR * x[0] * pow(x[1], 0.3e1) * x[2] * x[2] + 0.4e1 * AmpliR * x[0] * x[1] * x[2] * x[2]) / (rhol - Amplirho * (tanh(gammarho * (x[2] - 0.5e0)) / 0.2e1 + 0.1e1 / 0.2e1)) + (-0.16e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) + 0.12e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * pow(x[2], 0.4e1) + 0.32e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) + 0.24e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * pow(x[2], 0.4e1) - 0.24e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) - 0.12e2 * AmpliR * x[0] * pow(x[1], 0.4e1) * pow(x[2], 0.4e1) - 0.16e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * x[2] * x[2] - 0.48e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * pow(x[2], 0.3e1) - 0.8e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * pow(x[2], 0.4e1) + 0.12e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * x[2] * x[2] - 0.24e2 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.4e1) + 0.24e2 * AmpliR * x[0] * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) + 0.16e2 * AmpliR * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) + 0.2e1 * AmpliR * pow(x[1], 0.4e1) * pow(x[2], 0.4e1) + 0.24e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * x[2] * x[2] + 0.16e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * pow(x[2], 0.3e1) + 0.48e2 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.3e1) + 0.12e2 * AmpliR * x[0] * x[0] * x[1] * pow(x[2], 0.4e1) - 0.12e2 * AmpliR * x[0] * pow(x[1], 0.4e1) * x[2] * x[2] - 0.32e2 * AmpliR * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) - 0.4e1 * AmpliR * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) - 0.4e1 * AmpliR * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) - 0.8e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[2] * x[2] - 0.24e2 * AmpliR * x[2] * x[2] * x[1] * x[1] * x[0] * x[0] - 0.24e2 * AmpliR * x[0] * x[0] * x[1] * pow(x[2], 0.3e1) + 0.16e2 * AmpliR * x[0] * pow(x[1], 0.3e1) * x[2] * x[2] - 0.4e1 * AmpliR * x[0] * x[1] * pow(x[2], 0.4e1) + 0.2e1 * AmpliR * pow(x[1], 0.4e1) * x[2] * x[2] + 0.8e1 * AmpliR * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) + 0.2e1 * AmpliR * x[1] * x[1] * pow(x[2], 0.4e1) + 0.12e2 * AmpliR * x[2] * x[2] * x[1] * x[0] * x[0] + 0.8e1 * AmpliR * x[0] * x[1] * pow(x[2], 0.3e1) - 0.4e1 * AmpliR * pow(x[1], 0.3e1) * x[2] * x[2] - 0.4e1 * AmpliR * x[1] * x[1] * pow(x[2], 0.3e1) - 0.4e1 * AmpliR * x[0] * x[1] * x[2] * x[2] + 0.2e1 * AmpliR * x[2] * x[2] * x[1] * x[1]) * Amplirho * gammarho * (0.1e1 - pow(tanh(gammarho * (x[2] - 0.5e0)), 0.2e1)) * pow(rhol - Amplirho * (tanh(gammarho * (x[2] - 0.5e0)) / 0.2e1 + 0.1e1 / 0.2e1), -0.2e1) / 0.12e2)
+AmpliP*x[1]*x[2]""","""-0.2e1 * mu * ((-0.8e1 / 0.3e1 * AmpliR * x[2] * x[2] * x[0] - 0.16e2 * AmpliR * x[2] * x[2] * x[1] * x[1] * x[0] - 0.32e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * pow(x[2], 0.4e1) - 0.32e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * pow(x[2], 0.3e1) + 0.48e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[2] * x[2] - 0.16e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[2] + 0.32e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * pow(x[2], 0.3e1) - 0.48e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * x[2] * x[2] + 0.32e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * pow(x[2], 0.4e1) + 0.16e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * x[2] - 0.32e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * x[2] + 0.32e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[2] + 0.48e2 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.4e1) - 0.64e2 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.3e1) + 0.16e2 * AmpliR * x[0] * x[1] * pow(x[2], 0.4e1) - 0.32e2 * AmpliR * x[0] * x[1] * pow(x[2], 0.3e1) - 0.16e2 * AmpliR * x[2] * x[1] * x[0] * x[0] + 0.16e2 * AmpliR * x[2] * x[1] * x[1] * x[0] * x[0] - 0.32e2 / 0.3e1 * AmpliR * x[0] * x[0] * pow(x[2], 0.3e1) - 0.16e2 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * x[2] + 0.8e1 / 0.3e1 * AmpliR * x[0] * x[0] * x[2] + 0.8e1 * AmpliR * x[0] * x[0] * pow(x[2], 0.4e1) + 0.8e1 / 0.3e1 * AmpliR * pow(x[0], 0.4e1) * x[2] - 0.16e2 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[2], 0.4e1) + 0.16e2 / 0.3e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[2], 0.3e1) - 0.8e1 / 0.3e1 * AmpliR * x[0] * pow(x[2], 0.4e1) - 0.8e1 * AmpliR * pow(x[0], 0.4e1) * x[2] * x[2] + 0.16e2 / 0.3e1 * AmpliR * x[0] * pow(x[2], 0.3e1) + 0.32e2 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * x[2] * x[2] + 0.64e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * x[2] * x[2] - 0.48e2 * AmpliR * x[0] * x[0] * x[1] * pow(x[2], 0.4e1) - 0.16e2 * AmpliR * x[0] * x[1] * x[1] * pow(x[2], 0.4e1) - 0.64e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[2] * x[2] + 0.64e2 * AmpliR * x[0] * x[0] * x[1] * pow(x[2], 0.3e1) + 0.32e2 * AmpliR * x[0] * x[1] * x[1] * pow(x[2], 0.3e1) + 0.16e2 * AmpliR * x[0] * x[1] * x[2] * x[2]) / (rhol - Amplirho * (tanh(gammarho * (x[2] - 0.5e0)) / 0.2e1 + 0.1e1 / 0.2e1)) + (0.24e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) - 0.12e2 * AmpliR * x[0] * pow(x[1], 0.4e1) * pow(x[2], 0.4e1) - 0.36e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * x[2] * x[2] - 0.48e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) + 0.24e2 * AmpliR * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) + 0.6e1 * AmpliR * pow(x[1], 0.4e1) * pow(x[2], 0.4e1) + 0.12e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * x[2] + 0.72e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * x[2] * x[2] + 0.24e2 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.3e1) + 0.24e2 * AmpliR * x[0] * pow(x[1], 0.4e1) * x[2] * x[2] - 0.12e2 * AmpliR * x[0] * x[1] * x[1] * pow(x[2], 0.4e1) - 0.8e1 * AmpliR * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) - 0.12e2 * AmpliR * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) - 0.24e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * x[2] - 0.36e2 * AmpliR * x[2] * x[2] * x[1] * x[1] * x[0] * x[0] - 0.12e2 * AmpliR * x[0] * pow(x[1], 0.4e1) * x[2] - 0.48e2 * AmpliR * x[0] * pow(x[1], 0.3e1) * x[2] * x[2] + 0.16e2 * AmpliR * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) + 0.6e1 * AmpliR * x[1] * x[1] * pow(x[2], 0.4e1) + 0.12e2 * AmpliR * x[2] * x[1] * x[1] * x[0] * x[0] + 0.24e2 * AmpliR * x[0] * pow(x[1], 0.3e1) * x[2] + 0.24e2 * AmpliR * x[2] * x[2] * x[1] * x[1] * x[0] + 0.2e1 * AmpliR * pow(x[1], 0.4e1) * x[2] - 0.8e1 * AmpliR * x[1] * x[1] * pow(x[2], 0.3e1) - 0.12e2 * AmpliR * x[2] * x[1] * x[1] * x[0] - 0.4e1 * AmpliR * pow(x[1], 0.3e1) * x[2] + 0.2e1 * AmpliR * x[2] * x[1] * x[1]) / (rhol - Amplirho * (tanh(gammarho * (x[2] - 0.5e0)) / 0.2e1 + 0.1e1 / 0.2e1)) + (0.12e2 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.4e1) * x[2] - 0.24e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.4e1) * x[2] * x[2] - 0.6e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.4e1) - 0.24e2 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.3e1) * x[2] + 0.48e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * x[2] * x[2] + 0.36e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * x[2] * x[2] + 0.12e2 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.3e1) + 0.12e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * x[2] + 0.8e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.4e1) - 0.24e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * x[2] * x[2] - 0.24e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * x[2] - 0.72e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * x[2] * x[2] - 0.12e2 * AmpliR * x[0] * pow(x[1], 0.4e1) * x[2] * x[2] - 0.6e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] - 0.16e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) + 0.48e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * x[2] + 0.36e2 * AmpliR * x[2] * x[2] * x[1] * x[1] * x[0] * x[0] + 0.12e2 * AmpliR * x[0] * pow(x[1], 0.4e1) * x[2] + 0.24e2 * AmpliR * x[0] * pow(x[1], 0.3e1) * x[2] * x[2] + 0.8e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] - 0.24e2 * AmpliR * x[2] * x[1] * x[1] * x[0] * x[0] - 0.2e1 * AmpliR * x[0] * pow(x[1], 0.4e1) - 0.24e2 * AmpliR * x[0] * pow(x[1], 0.3e1) * x[2] - 0.12e2 * AmpliR * x[2] * x[2] * x[1] * x[1] * x[0] + 0.4e1 * AmpliR * x[0] * pow(x[1], 0.3e1) + 0.12e2 * AmpliR * x[2] * x[1] * x[1] * x[0] - 0.2e1 * AmpliR * x[1] * x[1] * x[0]) / (rhol - Amplirho * (tanh(gammarho * (x[2] - 0.5e0)) / 0.2e1 + 0.1e1 / 0.2e1)) + (0.12e2 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.4e1) * x[2] * x[2] - 0.16e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) - 0.12e2 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.4e1) * x[2] - 0.24e2 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.3e1) * x[2] * x[2] + 0.32e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) + 0.24e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) + 0.2e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.4e1) + 0.24e2 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.3e1) * x[2] + 0.12e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * x[2] * x[2] + 0.16e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.4e1) * x[2] - 0.16e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * pow(x[2], 0.3e1) - 0.24e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * x[2] * x[2] - 0.48e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) - 0.8e1 * AmpliR * x[0] * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) - 0.4e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.3e1) - 0.12e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * x[2] - 0.4e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.4e1) - 0.32e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * x[2] + 0.48e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * x[2] * x[2] + 0.24e2 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.3e1) + 0.12e2 * AmpliR * x[0] * pow(x[1], 0.4e1) * x[2] * x[2] + 0.16e2 * AmpliR * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) + 0.2e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] + 0.8e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) + 0.16e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * x[2] + 0.2e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) - 0.24e2 * AmpliR * x[2] * x[2] * x[1] * x[1] * x[0] * x[0] - 0.4e1 * AmpliR * x[0] * pow(x[1], 0.4e1) * x[2] - 0.24e2 * AmpliR * x[0] * pow(x[1], 0.3e1) * x[2] * x[2] - 0.8e1 * AmpliR * x[0] * x[1] * x[1] * pow(x[2], 0.3e1) - 0.4e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] - 0.4e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) + 0.8e1 * AmpliR * x[0] * pow(x[1], 0.3e1) * x[2] + 0.12e2 * AmpliR * x[2] * x[2] * x[1] * x[1] * x[0] + 0.2e1 * AmpliR * x[0] * x[0] * x[1] * x[1] - 0.4e1 * AmpliR * x[2] * x[1] * x[1] * x[0]) * Amplirho * gammarho * (0.1e1 - pow(tanh(gammarho * (x[2] - 0.5e0)), 0.2e1)) * pow(rhol - Amplirho * (tanh(gammarho * (x[2] - 0.5e0)) / 0.2e1 + 0.1e1 / 0.2e1), -0.2e1) / 0.2e1 + (0.4e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) - 0.4e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.4e1) * pow(x[2], 0.4e1) - 0.6e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.4e1) * x[2] * x[2] - 0.8e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) + 0.8e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) + 0.6e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * pow(x[2], 0.4e1) + 0.2e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.4e1) * x[2] + 0.12e2 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.3e1) * x[2] * x[2] + 0.4e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * pow(x[2], 0.3e1) + 0.8e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.4e1) * x[2] * x[2] - 0.4e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * pow(x[2], 0.4e1) - 0.8e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) - 0.12e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) - 0.2e1 * AmpliR * x[0] * pow(x[1], 0.4e1) * pow(x[2], 0.4e1) - 0.4e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.3e1) * x[2] - 0.6e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * x[2] * x[2] - 0.4e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.4e1) * x[2] - 0.16e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * x[2] * x[2] + 0.16e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) + 0.6e1 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.4e1) + 0.4e1 * AmpliR * x[0] * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) + 0.4e1 * AmpliR * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) + 0.2e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * x[2] + 0.8e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * x[2] + 0.8e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * x[2] * x[2] + 0.2e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * x[2] - 0.8e1 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.3e1) - 0.2e1 * AmpliR * x[0] * pow(x[1], 0.4e1) * x[2] * x[2] - 0.8e1 * AmpliR * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) - 0.2e1 * AmpliR * x[0] * x[1] * x[1] * pow(x[2], 0.4e1) - 0.4e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * x[2] - 0.4e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * x[2] + 0.4e1 * AmpliR * x[0] * pow(x[1], 0.3e1) * x[2] * x[2] + 0.4e1 * AmpliR * x[0] * x[1] * x[1] * pow(x[2], 0.3e1) + 0.2e1 * AmpliR * x[2] * x[1] * x[1] * x[0] * x[0] - 0.2e1 * AmpliR * x[2] * x[2] * x[1] * x[1] * x[0]) * Amplirho * Amplirho * gammarho * gammarho * pow(0.1e1 - pow(tanh(gammarho * (x[2] - 0.5e0)), 0.2e1), 0.2e1) * pow(rhol - Amplirho * (tanh(gammarho * (x[2] - 0.5e0)) / 0.2e1 + 0.1e1 / 0.2e1), -0.3e1) / 0.4e1 - (0.4e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) - 0.4e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.4e1) * pow(x[2], 0.4e1) - 0.6e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.4e1) * x[2] * x[2] - 0.8e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) + 0.8e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) + 0.6e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * pow(x[2], 0.4e1) + 0.2e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.4e1) * x[2] + 0.12e2 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.3e1) * x[2] * x[2] + 0.4e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * pow(x[2], 0.3e1) + 0.8e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.4e1) * x[2] * x[2] - 0.4e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * pow(x[2], 0.4e1) - 0.8e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) - 0.12e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) - 0.2e1 * AmpliR * x[0] * pow(x[1], 0.4e1) * pow(x[2], 0.4e1) - 0.4e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[1], 0.3e1) * x[2] - 0.6e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * x[2] * x[2] - 0.4e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.4e1) * x[2] - 0.16e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * x[2] * x[2] + 0.16e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) + 0.6e1 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.4e1) + 0.4e1 * AmpliR * x[0] * pow(x[1], 0.4e1) * pow(x[2], 0.3e1) + 0.4e1 * AmpliR * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) + 0.2e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * x[2] + 0.8e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * x[2] + 0.8e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * x[2] * x[2] + 0.2e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.4e1) * x[2] - 0.8e1 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.3e1) - 0.2e1 * AmpliR * x[0] * pow(x[1], 0.4e1) * x[2] * x[2] - 0.8e1 * AmpliR * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) - 0.2e1 * AmpliR * x[0] * x[1] * x[1] * pow(x[2], 0.4e1) - 0.4e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * x[2] - 0.4e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * x[2] + 0.4e1 * AmpliR * x[0] * pow(x[1], 0.3e1) * x[2] * x[2] + 0.4e1 * AmpliR * x[0] * x[1] * x[1] * pow(x[2], 0.3e1) + 0.2e1 * AmpliR * x[2] * x[1] * x[1] * x[0] * x[0] - 0.2e1 * AmpliR * x[2] * x[2] * x[1] * x[1] * x[0]) * Amplirho * gammarho * gammarho * tanh(gammarho * (x[2] - 0.5e0)) * (0.1e1 - pow(tanh(gammarho * (x[2] - 0.5e0)), 0.2e1)) * pow(rhol - Amplirho * (tanh(gammarho * (x[2] - 0.5e0)) / 0.2e1 + 0.1e1 / 0.2e1), -0.2e1) / 0.2e1 + (-0.2e1 * AmpliR * x[2] * x[2] * x[0] * x[0] + 0.2e1 / 0.3e1 * AmpliR * x[2] * x[2] * x[0] - 0.8e1 * AmpliR * x[2] * x[2] * x[1] * x[1] * x[0] + 0.8e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * pow(x[2], 0.4e1) + 0.16e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) - 0.8e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * pow(x[2], 0.4e1) - 0.32e2 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) + 0.16e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * x[2] * x[2] - 0.16e2 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * x[2] + 0.8e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * x[2] - 0.8e1 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[2] - 0.8e1 / 0.3e1 * AmpliR * x[0] * pow(x[1], 0.3e1) * x[2] - 0.12e2 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.4e1) - 0.4e1 * AmpliR * x[0] * x[1] * pow(x[2], 0.4e1) + 0.16e2 / 0.3e1 * AmpliR * x[0] * x[1] * pow(x[2], 0.3e1) + 0.8e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * x[2] - 0.4e1 / 0.3e1 * AmpliR * x[2] * x[1] * x[0] + 0.4e1 * AmpliR * x[2] * x[1] * x[1] * x[0] + 0.4e1 * AmpliR * x[2] * x[1] * x[0] * x[0] - 0.12e2 * AmpliR * x[2] * x[1] * x[1] * x[0] * x[0] + 0.4e1 * AmpliR * x[0] * x[0] * pow(x[2], 0.3e1) - 0.2e1 * AmpliR * x[0] * x[0] * pow(x[2], 0.4e1) - 0.8e1 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[2], 0.3e1) + 0.4e1 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[2], 0.4e1) + 0.2e1 / 0.3e1 * AmpliR * x[0] * pow(x[2], 0.4e1) - 0.4e1 / 0.3e1 * AmpliR * x[0] * pow(x[2], 0.3e1) + 0.4e1 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * x[2] * x[2] + 0.24e2 * AmpliR * x[2] * x[2] * x[1] * x[1] * x[0] * x[0] - 0.16e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[1] * x[2] * x[2] + 0.32e2 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * pow(x[2], 0.3e1) - 0.24e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * x[2] * x[2] + 0.12e2 * AmpliR * x[0] * x[0] * x[1] * pow(x[2], 0.4e1) - 0.16e2 / 0.3e1 * AmpliR * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) + 0.4e1 * AmpliR * x[0] * x[1] * x[1] * pow(x[2], 0.4e1) - 0.16e2 * AmpliR * x[0] * x[0] * x[1] * pow(x[2], 0.3e1) + 0.8e1 * AmpliR * x[0] * pow(x[1], 0.3e1) * x[2] * x[2]) / (rhol - Amplirho * (tanh(gammarho * (x[2] - 0.5e0)) / 0.2e1 + 0.1e1 / 0.2e1)) + (0.2e1 * AmpliR * x[2] * x[2] * x[0] * x[0] + 0.12e2 * AmpliR * x[2] * x[2] * x[1] * x[1] * x[0] + 0.8e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * pow(x[2], 0.3e1) - 0.16e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) - 0.12e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[2] * x[2] + 0.4e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[2] - 0.8e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * pow(x[2], 0.3e1) + 0.12e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * x[2] * x[2] - 0.4e1 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * x[2] + 0.32e2 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) - 0.16e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * x[2] * x[2] + 0.16e2 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * x[2] - 0.16e2 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[2] + 0.8e1 / 0.3e1 * AmpliR * x[0] * pow(x[1], 0.3e1) * x[2] + 0.16e2 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.3e1) + 0.8e1 / 0.3e1 * AmpliR * x[0] * x[1] * pow(x[2], 0.3e1) - 0.8e1 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * x[2] + 0.4e1 / 0.3e1 * AmpliR * x[2] * x[1] * x[0] - 0.4e1 * AmpliR * x[2] * x[1] * x[1] * x[0] + 0.8e1 * AmpliR * x[2] * x[1] * x[1] * x[0] * x[0] - 0.4e1 / 0.3e1 * AmpliR * x[0] * x[0] * pow(x[2], 0.3e1) + 0.4e1 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * x[2] - 0.2e1 / 0.3e1 * AmpliR * x[0] * x[0] * x[2] - 0.2e1 / 0.3e1 * AmpliR * pow(x[0], 0.4e1) * x[2] + 0.8e1 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[2], 0.3e1) - 0.4e1 / 0.3e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[2], 0.3e1) + 0.2e1 * AmpliR * pow(x[0], 0.4e1) * x[2] * x[2] - 0.4e1 * AmpliR * pow(x[0], 0.3e1) * x[2] * x[2] - 0.24e2 * AmpliR * x[2] * x[2] * x[1] * x[1] * x[0] * x[0] - 0.32e2 / 0.3e1 * AmpliR * pow(x[0], 0.3e1) * x[1] * pow(x[2], 0.3e1) + 0.24e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * x[2] * x[2] + 0.16e2 / 0.3e1 * AmpliR * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) + 0.16e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[2] * x[2] - 0.8e1 * AmpliR * x[0] * pow(x[1], 0.3e1) * x[2] * x[2] - 0.8e1 * AmpliR * x[0] * x[1] * x[1] * pow(x[2], 0.3e1) - 0.4e1 * AmpliR * x[0] * x[1] * x[2] * x[2]) / (rhol - Amplirho * (tanh(gammarho * (x[2] - 0.5e0)) / 0.2e1 + 0.1e1 / 0.2e1)) + (-0.12e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * pow(x[2], 0.4e1) + 0.16e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) + 0.24e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * pow(x[2], 0.3e1) + 0.12e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * pow(x[2], 0.4e1) - 0.32e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) - 0.24e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) - 0.12e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[1] * x[2] * x[2] - 0.24e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * pow(x[2], 0.3e1) - 0.2e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[2], 0.4e1) + 0.16e2 * AmpliR * pow(x[0], 0.3e1) * pow(x[1], 0.3e1) * x[2] * x[2] - 0.16e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * pow(x[2], 0.4e1) + 0.48e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) + 0.24e2 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.4e1) + 0.8e1 * AmpliR * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.4e1) + 0.12e2 * AmpliR * pow(x[0], 0.4e1) * x[1] * x[2] * x[2] + 0.4e1 * AmpliR * pow(x[0], 0.4e1) * pow(x[2], 0.3e1) + 0.32e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * pow(x[2], 0.3e1) + 0.4e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[2], 0.4e1) - 0.24e2 * AmpliR * x[0] * x[0] * pow(x[1], 0.3e1) * x[2] * x[2] - 0.48e2 * AmpliR * x[0] * x[0] * x[1] * x[1] * pow(x[2], 0.3e1) - 0.16e2 * AmpliR * x[0] * pow(x[1], 0.3e1) * pow(x[2], 0.3e1) - 0.12e2 * AmpliR * x[0] * x[1] * x[1] * pow(x[2], 0.4e1) - 0.2e1 * AmpliR * pow(x[0], 0.4e1) * x[2] * x[2] - 0.16e2 * AmpliR * pow(x[0], 0.3e1) * x[1] * x[2] * x[2] - 0.8e1 * AmpliR * pow(x[0], 0.3e1) * pow(x[2], 0.3e1) + 0.24e2 * AmpliR * x[2] * x[2] * x[1] * x[1] * x[0] * x[0] - 0.2e1 * AmpliR * x[0] * x[0] * pow(x[2], 0.4e1) + 0.8e1 * AmpliR * x[0] * pow(x[1], 0.3e1) * x[2] * x[2] + 0.24e2 * AmpliR * x[0] * x[1] * x[1] * pow(x[2], 0.3e1) + 0.4e1 * AmpliR * x[0] * x[1] * pow(x[2], 0.4e1) + 0.4e1 * AmpliR * pow(x[0], 0.3e1) * x[2] * x[2] + 0.4e1 * AmpliR * x[0] * x[0] * pow(x[2], 0.3e1) - 0.12e2 * AmpliR * x[2] * x[2] * x[1] * x[1] * x[0] - 0.8e1 * AmpliR * x[0] * x[1] * pow(x[2], 0.3e1) - 0.2e1 * AmpliR * x[2] * x[2] * x[0] * x[0] + 0.4e1 * AmpliR * x[0] * x[1] * x[2] * x[2]) * Amplirho * gammarho * (0.1e1 - pow(tanh(gammarho * (x[2] - 0.5e0)), 0.2e1)) * pow(rhol - Amplirho * (tanh(gammarho * (x[2] - 0.5e0)) / 0.2e1 + 0.1e1 / 0.2e1), -0.2e1) / 0.12e2)
+AmpliP*x[0]*x[2]""","""(0.128e3 / 0.3e1 * (double) (-x[1] + x[0]) * (Amplirho * (double) (x[1] - 1) * (double) (x[0] - 1) * (double) x[1] * ((-0.7e1 / 0.8e1 - x[2] * x[2] * gammarho / 0.2e1 + (gammarho / 0.2e1 + 0.7e1 / 0.4e1) * x[2]) * Amplirho + x[2] * rhol * gammarho * (x[2] - 0.1e1)) * (((double) x[1] - 0.1e1 / 0.2e1) * (double) x[0] - (double) x[1] / 0.2e1 + 0.1e1 / 0.2e1) * (x[2] - 0.1e1) * gammarho * (double) x[0] * x[2] * pow(tanh(gammarho * (x[2] - 0.5e0)), 0.3e1) - Amplirho * ((((-0.3e1 / 0.4e1 + pow(x[2], 0.4e1) * gammarho * gammarho + (-0.2e1 * gammarho * gammarho - 0.7e1 / 0.2e1 * gammarho) * pow(x[2], 0.3e1) + (gammarho * gammarho + 0.21e2 / 0.4e1 * gammarho - 0.9e1 / 0.2e1) * x[2] * x[2] + (-0.7e1 / 0.4e1 * gammarho + 0.9e1 / 0.2e1) * x[2]) * (double) (x[1] * x[1]) + (0.3e1 / 0.4e1 - pow(x[2], 0.4e1) * gammarho * gammarho + (0.2e1 * gammarho * gammarho + 0.7e1 / 0.2e1 * gammarho) * pow(x[2], 0.3e1) + (-gammarho * gammarho + 0.9e1 / 0.2e1 - 0.21e2 / 0.4e1 * gammarho) * x[2] * x[2] + (-0.9e1 / 0.2e1 + 0.7e1 / 0.4e1 * gammarho) * x[2]) * (double) x[1] - 0.9e1 / 0.4e1 * x[2] * x[2] * pow(x[2] - 0.1e1, 0.2e1)) * ((double) x[1] - 0.1e1 / 0.2e1) * (double)  pow((double) x[0], (double) 3) + ((0.9e1 / 0.8e1 - 0.3e1 / 0.2e1 * pow(x[2], 0.4e1) * gammarho * gammarho + (0.3e1 * gammarho * gammarho + 0.21e2 / 0.4e1 * gammarho) * pow(x[2], 0.3e1) + (-0.3e1 / 0.2e1 * gammarho * gammarho - 0.63e2 / 0.8e1 * gammarho + 0.27e2 / 0.4e1) * x[2] * x[2] + (0.21e2 / 0.8e1 * gammarho - 0.27e2 / 0.4e1) * x[2]) * (double)  pow((double) x[1], (double) 3) + (-0.15e2 / 0.8e1 + (0.9e1 / 0.4e1 + 0.5e1 / 0.2e1 * gammarho * gammarho) * pow(x[2], 0.4e1) + (-0.9e1 / 0.2e1 - 0.5e1 * gammarho * gammarho - 0.35e2 / 0.4e1 * gammarho) * pow(x[2], 0.3e1) + (0.5e1 / 0.2e1 * gammarho * gammarho - 0.9e1 + 0.105e3 / 0.8e1 * gammarho) * x[2] * x[2] + (0.45e2 / 0.4e1 - 0.35e2 / 0.8e1 * gammarho) * x[2]) * (double) (x[1] * x[1]) + (0.3e1 / 0.4e1 + (0.9e1 / 0.8e1 - gammarho * gammarho) * pow(x[2], 0.4e1) + (-0.9e1 / 0.4e1 + 0.2e1 * gammarho * gammarho + 0.7e1 / 0.2e1 * gammarho) * pow(x[2], 0.3e1) + (-gammarho * gammarho + 0.45e2 / 0.8e1 - 0.21e2 / 0.4e1 * gammarho) * x[2] * x[2] + (-0.9e1 / 0.2e1 + 0.7e1 / 0.4e1 * gammarho) * x[2]) * (double) x[1] - 0.3e1 / 0.2e1 * x[2] * x[2] * pow(x[2] - 0.1e1, 0.2e1)) * (double) (x[0] * x[0]) + ((-0.3e1 / 0.4e1 + (-0.9e1 / 0.2e1 + gammarho * gammarho) * pow(x[2], 0.4e1) + (0.9e1 - 0.2e1 * gammarho * gammarho - 0.7e1 / 0.2e1 * gammarho) * pow(x[2], 0.3e1) + (gammarho * gammarho - 0.9e1 + 0.21e2 / 0.4e1 * gammarho) * x[2] * x[2] + (-0.7e1 / 0.4e1 * gammarho + 0.9e1 / 0.2e1) * x[2]) * (double) (x[1] * x[1]) + (0.3e1 / 0.2e1 + (0.9e1 / 0.4e1 - 0.2e1 * gammarho * gammarho) * pow(x[2], 0.4e1) + (-0.9e1 / 0.2e1 + 0.4e1 * gammarho * gammarho + 0.7e1 * gammarho) * pow(x[2], 0.3e1) + (-0.2e1 * gammarho * gammarho + 0.45e2 / 0.4e1 - 0.21e2 / 0.2e1 * gammarho) * x[2] * x[2] + (-0.9e1 + 0.7e1 / 0.2e1 * gammarho) * x[2]) * (double) x[1] - 0.3e1 / 0.4e1 + (0.3e1 / 0.2e1 + gammarho * gammarho) * pow(x[2], 0.4e1) + (-0.3e1 - 0.7e1 / 0.2e1 * gammarho - 0.2e1 * gammarho * gammarho) * pow(x[2], 0.3e1) + (0.21e2 / 0.4e1 * gammarho + gammarho * gammarho - 0.3e1) * x[2] * x[2] + (-0.7e1 / 0.4e1 * gammarho + 0.9e1 / 0.2e1) * x[2]) * (double) x[1] * (double) x[0] / 0.2e1 + 0.9e1 / 0.8e1 * (double) (x[1] - 1) * pow(x[2] - 0.1e1, 0.2e1) * ((double) (x[1] * x[1]) - (double) x[1] / 0.3e1 - 0.1e1 / 0.3e1) * x[2] * x[2]) * Amplirho + 0.7e1 * (double) (x[1] - 1) * (double) (x[0] - 1) * (double) x[1] * (((double) x[1] - 0.1e1 / 0.2e1) * (double) x[0] - (double) x[1] / 0.2e1 + 0.1e1 / 0.2e1) * (x[2] - 0.1e1) * gammarho * (x[2] - 0.1e1 / 0.2e1) * rhol * (double) x[0] * x[2]) * pow(tanh(gammarho * (x[2] - 0.5e0)), 0.2e1) / 0.2e1 - Amplirho * ((-((double) x[1] - 0.1e1 / 0.2e1) * ((0.3e1 / 0.2e1 + pow(x[2], 0.4e1) * gammarho * gammarho + (-0.2e1 * gammarho * gammarho - 0.7e1 / 0.2e1 * gammarho) * pow(x[2], 0.3e1) + (gammarho * gammarho + 0.21e2 / 0.4e1 * gammarho + 0.9e1) * x[2] * x[2] + (-0.9e1 - 0.7e1 / 0.4e1 * gammarho) * x[2]) * (double) (x[1] * x[1]) + (-0.3e1 / 0.2e1 - pow(x[2], 0.4e1) * gammarho * gammarho + (0.2e1 * gammarho * gammarho + 0.7e1 / 0.2e1 * gammarho) * pow(x[2], 0.3e1) + (-gammarho * gammarho - 0.21e2 / 0.4e1 * gammarho - 0.9e1) * x[2] * x[2] + (0.7e1 / 0.4e1 * gammarho + 0.9e1) * x[2]) * (double) x[1] + 0.9e1 / 0.2e1 * x[2] * x[2] * pow(x[2] - 0.1e1, 0.2e1)) * (double)  pow((double) x[0], (double) 3) / 0.2e1 + ((0.9e1 / 0.8e1 + 0.3e1 / 0.4e1 * pow(x[2], 0.4e1) * gammarho * gammarho + (-0.3e1 / 0.2e1 * gammarho * gammarho - 0.21e2 / 0.8e1 * gammarho) * pow(x[2], 0.3e1) + (0.3e1 / 0.4e1 * gammarho * gammarho + 0.63e2 / 0.16e2 * gammarho + 0.27e2 / 0.4e1) * x[2] * x[2] + (-0.21e2 / 0.16e2 * gammarho - 0.27e2 / 0.4e1) * x[2]) * (double)  pow((double) x[1], (double) 3) + (-0.15e2 / 0.8e1 + (0.9e1 / 0.4e1 - 0.5e1 / 0.4e1 * gammarho * gammarho) * pow(x[2], 0.4e1) + (-0.9e1 / 0.2e1 + 0.5e1 / 0.2e1 * gammarho * gammarho + 0.35e2 / 0.8e1 * gammarho) * pow(x[2], 0.3e1) + (-0.5e1 / 0.4e1 * gammarho * gammarho - 0.9e1 - 0.105e3 / 0.16e2 * gammarho) * x[2] * x[2] + (0.45e2 / 0.4e1 + 0.35e2 / 0.16e2 * gammarho) * x[2]) * (double) (x[1] * x[1]) + (0.3e1 / 0.4e1 + (0.9e1 / 0.8e1 + gammarho * gammarho / 0.2e1) * pow(x[2], 0.4e1) + (-0.9e1 / 0.4e1 - gammarho * gammarho - 0.7e1 / 0.4e1 * gammarho) * pow(x[2], 0.3e1) + (gammarho * gammarho / 0.2e1 + 0.45e2 / 0.8e1 + 0.21e2 / 0.8e1 * gammarho) * x[2] * x[2] + (-0.9e1 / 0.2e1 - 0.7e1 / 0.8e1 * gammarho) * x[2]) * (double) x[1] - 0.3e1 / 0.2e1 * x[2] * x[2] * pow(x[2] - 0.1e1, 0.2e1)) * (double) (x[0] * x[0]) - (double) x[1] * ((0.3e1 / 0.2e1 + (gammarho * gammarho + 0.9e1) * pow(x[2], 0.4e1) + (-0.18e2 - 0.2e1 * gammarho * gammarho - 0.7e1 / 0.2e1 * gammarho) * pow(x[2], 0.3e1) + (gammarho * gammarho + 0.18e2 + 0.21e2 / 0.4e1 * gammarho) * x[2] * x[2] + (-0.9e1 - 0.7e1 / 0.4e1 * gammarho) * x[2]) * (double) (x[1] * x[1]) + (-0.3e1 + (-0.2e1 * gammarho * gammarho - 0.9e1 / 0.2e1) * pow(x[2], 0.4e1) + (0.4e1 * gammarho * gammarho + 0.7e1 * gammarho + 0.9e1) * pow(x[2], 0.3e1) + (-0.2e1 * gammarho * gammarho - 0.21e2 / 0.2e1 * gammarho - 0.45e2 / 0.2e1) * x[2] * x[2] + (0.7e1 / 0.2e1 * gammarho + 0.18e2) * x[2]) * (double) x[1] + 0.3e1 / 0.2e1 + (gammarho * gammarho - 0.3e1) * pow(x[2], 0.4e1) + (0.6e1 - 0.7e1 / 0.2e1 * gammarho - 0.2e1 * gammarho * gammarho) * pow(x[2], 0.3e1) + (0.21e2 / 0.4e1 * gammarho + gammarho * gammarho + 0.6e1) * x[2] * x[2] + (-0.9e1 - 0.7e1 / 0.4e1 * gammarho) * x[2]) * (double) x[0] / 0.4e1 + 0.9e1 / 0.8e1 * (double) (x[1] - 1) * pow(x[2] - 0.1e1, 0.2e1) * ((double) (x[1] * x[1]) - (double) x[1] / 0.3e1 - 0.1e1 / 0.3e1) * x[2] * x[2]) * Amplirho + (((0.3e1 / 0.2e1 + pow(x[2], 0.4e1) * gammarho * gammarho - 0.2e1 * pow(x[2], 0.3e1) * gammarho * gammarho + (gammarho * gammarho + 0.9e1) * x[2] * x[2] - 0.9e1 * x[2]) * (double) (x[1] * x[1]) + (-0.3e1 / 0.2e1 - pow(x[2], 0.4e1) * gammarho * gammarho + 0.2e1 * pow(x[2], 0.3e1) * gammarho * gammarho + (-gammarho * gammarho - 0.9e1) * x[2] * x[2] + 0.9e1 * x[2]) * (double) x[1] + 0.9e1 / 0.2e1 * x[2] * x[2] * pow(x[2] - 0.1e1, 0.2e1)) * ((double) x[1] - 0.1e1 / 0.2e1) * (double)  pow((double) x[0], (double) 3) + ((-0.9e1 / 0.4e1 - 0.3e1 / 0.2e1 * pow(x[2], 0.4e1) * gammarho * gammarho + 0.3e1 * pow(x[2], 0.3e1) * gammarho * gammarho + (-0.27e2 / 0.2e1 - 0.3e1 / 0.2e1 * gammarho * gammarho) * x[2] * x[2] + 0.27e2 / 0.2e1 * x[2]) * (double)  pow((double) x[1], (double) 3) + (0.15e2 / 0.4e1 + (-0.9e1 / 0.2e1 + 0.5e1 / 0.2e1 * gammarho * gammarho) * pow(x[2], 0.4e1) + (-0.5e1 * gammarho * gammarho + 0.9e1) * pow(x[2], 0.3e1) + (0.18e2 + 0.5e1 / 0.2e1 * gammarho * gammarho) * x[2] * x[2] - 0.45e2 / 0.2e1 * x[2]) * (double) (x[1] * x[1]) + (-0.3e1 / 0.2e1 + (-0.9e1 / 0.4e1 - gammarho * gammarho) * pow(x[2], 0.4e1) + (0.9e1 / 0.2e1 + 0.2e1 * gammarho * gammarho) * pow(x[2], 0.3e1) + (-gammarho * gammarho - 0.45e2 / 0.4e1) * x[2] * x[2] + 0.9e1 * x[2]) * (double) x[1] + 0.3e1 * x[2] * x[2] * pow(x[2] - 0.1e1, 0.2e1)) * (double) (x[0] * x[0]) + (double) x[1] * ((0.3e1 / 0.2e1 + (gammarho * gammarho + 0.9e1) * pow(x[2], 0.4e1) + (-0.2e1 * gammarho * gammarho - 0.18e2) * pow(x[2], 0.3e1) + (gammarho * gammarho + 0.18e2) * x[2] * x[2] - 0.9e1 * x[2]) * (double) (x[1] * x[1]) + (-0.3e1 + (-0.2e1 * gammarho * gammarho - 0.9e1 / 0.2e1) * pow(x[2], 0.4e1) + (0.4e1 * gammarho * gammarho + 0.9e1) * pow(x[2], 0.3e1) + (-0.2e1 * gammarho * gammarho - 0.45e2 / 0.2e1) * x[2] * x[2] + 0.18e2 * x[2]) * (double) x[1] + 0.3e1 / 0.2e1 + (gammarho * gammarho - 0.3e1) * pow(x[2], 0.4e1) + (-0.2e1 * gammarho * gammarho + 0.6e1) * pow(x[2], 0.3e1) + (gammarho * gammarho + 0.6e1) * x[2] * x[2] - 0.9e1 * x[2]) * (double) x[0] / 0.2e1 - 0.9e1 / 0.4e1 * (double) (x[1] - 1) * pow(x[2] - 0.1e1, 0.2e1) * ((double) (x[1] * x[1]) - (double) x[1] / 0.3e1 - 0.1e1 / 0.3e1) * x[2] * x[2]) * rhol) * tanh(gammarho * (x[2] - 0.5e0)) + (((0.3e1 / 0.4e1 + pow(x[2], 0.4e1) * gammarho * gammarho + (-0.2e1 * gammarho * gammarho - 0.7e1 / 0.2e1 * gammarho) * pow(x[2], 0.3e1) + (0.9e1 / 0.2e1 + 0.21e2 / 0.4e1 * gammarho + gammarho * gammarho) * x[2] * x[2] + (-0.9e1 / 0.2e1 - 0.7e1 / 0.4e1 * gammarho) * x[2]) * (double) (x[1] * x[1]) + (-0.3e1 / 0.4e1 - pow(x[2], 0.4e1) * gammarho * gammarho + (0.2e1 * gammarho * gammarho + 0.7e1 / 0.2e1 * gammarho) * pow(x[2], 0.3e1) + (-0.9e1 / 0.2e1 - 0.21e2 / 0.4e1 * gammarho - gammarho * gammarho) * x[2] * x[2] + (0.9e1 / 0.2e1 + 0.7e1 / 0.4e1 * gammarho) * x[2]) * (double) x[1] + 0.9e1 / 0.4e1 * x[2] * x[2] * pow(x[2] - 0.1e1, 0.2e1)) * ((double) x[1] - 0.1e1 / 0.2e1) * (double)  pow((double) x[0], (double) 3) / 0.2e1 + ((-0.9e1 / 0.16e2 - 0.3e1 / 0.4e1 * pow(x[2], 0.4e1) * gammarho * gammarho + (0.3e1 / 0.2e1 * gammarho * gammarho + 0.21e2 / 0.8e1 * gammarho) * pow(x[2], 0.3e1) + (-0.27e2 / 0.8e1 - 0.3e1 / 0.4e1 * gammarho * gammarho - 0.63e2 / 0.16e2 * gammarho) * x[2] * x[2] + (0.27e2 / 0.8e1 + 0.21e2 / 0.16e2 * gammarho) * x[2]) * (double)  pow((double) x[1], (double) 3) + (0.15e2 / 0.16e2 + (-0.9e1 / 0.8e1 + 0.5e1 / 0.4e1 * gammarho * gammarho) * pow(x[2], 0.4e1) + (0.9e1 / 0.4e1 - 0.5e1 / 0.2e1 * gammarho * gammarho - 0.35e2 / 0.8e1 * gammarho) * pow(x[2], 0.3e1) + (0.9e1 / 0.2e1 + 0.105e3 / 0.16e2 * gammarho + 0.5e1 / 0.4e1 * gammarho * gammarho) * x[2] * x[2] + (-0.45e2 / 0.8e1 - 0.35e2 / 0.16e2 * gammarho) * x[2]) * (double) (x[1] * x[1]) + (-0.3e1 / 0.8e1 + (-0.9e1 / 0.16e2 - gammarho * gammarho / 0.2e1) * pow(x[2], 0.4e1) + (0.9e1 / 0.8e1 + 0.7e1 / 0.4e1 * gammarho + gammarho * gammarho) * pow(x[2], 0.3e1) + (-0.45e2 / 0.16e2 - 0.21e2 / 0.8e1 * gammarho - gammarho * gammarho / 0.2e1) * x[2] * x[2] + (0.9e1 / 0.4e1 + 0.7e1 / 0.8e1 * gammarho) * x[2]) * (double) x[1] + 0.3e1 / 0.4e1 * x[2] * x[2] * pow(x[2] - 0.1e1, 0.2e1)) * (double) (x[0] * x[0]) + (double) x[1] * ((0.3e1 / 0.4e1 + (0.9e1 / 0.2e1 + gammarho * gammarho) * pow(x[2], 0.4e1) + (-0.9e1 - 0.2e1 * gammarho * gammarho - 0.7e1 / 0.2e1 * gammarho) * pow(x[2], 0.3e1) + (gammarho * gammarho + 0.21e2 / 0.4e1 * gammarho + 0.9e1) * x[2] * x[2] + (-0.9e1 / 0.2e1 - 0.7e1 / 0.4e1 * gammarho) * x[2]) * (double) (x[1] * x[1]) + (-0.3e1 / 0.2e1 + (-0.9e1 / 0.4e1 - 0.2e1 * gammarho * gammarho) * pow(x[2], 0.4e1) + (0.9e1 / 0.2e1 + 0.4e1 * gammarho * gammarho + 0.7e1 * gammarho) * pow(x[2], 0.3e1) + (-0.2e1 * gammarho * gammarho - 0.21e2 / 0.2e1 * gammarho - 0.45e2 / 0.4e1) * x[2] * x[2] + (0.7e1 / 0.2e1 * gammarho + 0.9e1) * x[2]) * (double) x[1] + 0.3e1 / 0.4e1 + (gammarho * gammarho - 0.3e1 / 0.2e1) * pow(x[2], 0.4e1) + (0.3e1 - 0.2e1 * gammarho * gammarho - 0.7e1 / 0.2e1 * gammarho) * pow(x[2], 0.3e1) + (0.21e2 / 0.4e1 * gammarho + 0.3e1 + gammarho * gammarho) * x[2] * x[2] + (-0.9e1 / 0.2e1 - 0.7e1 / 0.4e1 * gammarho) * x[2]) * (double) x[0] / 0.4e1 - 0.9e1 / 0.16e2 * (double) (x[1] - 1) * pow(x[2] - 0.1e1, 0.2e1) * ((double) (x[1] * x[1]) - (double) x[1] / 0.3e1 - 0.1e1 / 0.3e1) * x[2] * x[2]) * Amplirho * Amplirho + 0.7e1 / 0.2e1 * (((-0.3e1 / 0.7e1 + pow(x[2], 0.3e1) * gammarho + (-0.3e1 / 0.2e1 * gammarho - 0.18e2 / 0.7e1) * x[2] * x[2] + (gammarho / 0.2e1 + 0.18e2 / 0.7e1) * x[2]) * (double) (x[1] * x[1]) + (0.3e1 / 0.7e1 - pow(x[2], 0.3e1) * gammarho + (0.3e1 / 0.2e1 * gammarho + 0.18e2 / 0.7e1) * x[2] * x[2] + (-gammarho / 0.2e1 - 0.18e2 / 0.7e1) * x[2]) * (double) x[1] - 0.9e1 / 0.7e1 * x[2] * x[2] * pow(x[2] - 0.1e1, 0.2e1)) * ((double) x[1] - 0.1e1 / 0.2e1) * (double)  pow((double) x[0], (double) 3) + ((0.9e1 / 0.14e2 - 0.3e1 / 0.2e1 * pow(x[2], 0.3e1) * gammarho + (0.27e2 / 0.7e1 + 0.9e1 / 0.4e1 * gammarho) * x[2] * x[2] + (-0.27e2 / 0.7e1 - 0.3e1 / 0.4e1 * gammarho) * x[2]) * (double)  pow((double) x[1], (double) 3) + (-0.15e2 / 0.14e2 + 0.9e1 / 0.7e1 * pow(x[2], 0.4e1) + (-0.18e2 / 0.7e1 + 0.5e1 / 0.2e1 * gammarho) * pow(x[2], 0.3e1) + (-0.36e2 / 0.7e1 - 0.15e2 / 0.4e1 * gammarho) * x[2] * x[2] + (0.45e2 / 0.7e1 + 0.5e1 / 0.4e1 * gammarho) * x[2]) * (double) (x[1] * x[1]) + (0.3e1 / 0.7e1 + 0.9e1 / 0.14e2 * pow(x[2], 0.4e1) + (-0.9e1 / 0.7e1 - gammarho) * pow(x[2], 0.3e1) + (0.3e1 / 0.2e1 * gammarho + 0.45e2 / 0.14e2) * x[2] * x[2] + (-gammarho / 0.2e1 - 0.18e2 / 0.7e1) * x[2]) * (double) x[1] - 0.6e1 / 0.7e1 * x[2] * x[2] * pow(x[2] - 0.1e1, 0.2e1)) * (double) (x[0] * x[0]) - 0.9e1 / 0.7e1 * ((0.1e1 / 0.6e1 + pow(x[2], 0.4e1) + (-0.7e1 / 0.18e2 * gammarho - 0.2e1) * pow(x[2], 0.3e1) + (0.7e1 / 0.12e2 * gammarho + 0.2e1) * x[2] * x[2] + (-0.7e1 / 0.36e2 * gammarho - 0.1e1) * x[2]) * (double) (x[1] * x[1]) + (-0.1e1 / 0.3e1 - pow(x[2], 0.4e1) / 0.2e1 + (0.7e1 / 0.9e1 * gammarho + 0.1e1) * pow(x[2], 0.3e1) + (-0.7e1 / 0.6e1 * gammarho - 0.5e1 / 0.2e1) * x[2] * x[2] + (0.7e1 / 0.18e2 * gammarho + 0.2e1) * x[2]) * (double) x[1] + 0.1e1 / 0.6e1 - pow(x[2], 0.4e1) / 0.3e1 + (-0.7e1 / 0.18e2 * gammarho + 0.2e1 / 0.3e1) * pow(x[2], 0.3e1) + (0.7e1 / 0.12e2 * gammarho + 0.2e1 / 0.3e1) * x[2] * x[2] + (-0.7e1 / 0.36e2 * gammarho - 0.1e1) * x[2]) * (double) x[1] * (double) x[0] + 0.9e1 / 0.14e2 * (double) (x[1] - 1) * pow(x[2] - 0.1e1, 0.2e1) * ((double) (x[1] * x[1]) - (double) x[1] / 0.3e1 - 0.1e1 / 0.3e1) * x[2] * x[2]) * rhol * Amplirho + 0.9e1 * rhol * rhol * (((x[2] * x[2] - x[2] + 0.1e1 / 0.6e1) * (double) (x[1] * x[1]) + (-x[2] * x[2] + x[2] - 0.1e1 / 0.6e1) * (double) x[1] + x[2] * x[2] * pow(x[2] - 0.1e1, 0.2e1) / 0.2e1) * ((double) x[1] - 0.1e1 / 0.2e1) * (double)  pow((double) x[0], (double) 3) + ((-0.1e1 / 0.4e1 - 0.3e1 / 0.2e1 * x[2] * x[2] + 0.3e1 / 0.2e1 * x[2]) * (double)  pow((double) x[1], (double) 3) + (-pow(x[2], 0.4e1) / 0.2e1 + pow(x[2], 0.3e1) - 0.5e1 / 0.2e1 * x[2] + 0.2e1 * x[2] * x[2] + 0.5e1 / 0.12e2) * (double) (x[1] * x[1]) + (-pow(x[2], 0.4e1) / 0.4e1 + pow(x[2], 0.3e1) / 0.2e1 - 0.5e1 / 0.4e1 * x[2] * x[2] + x[2] - 0.1e1 / 0.6e1) * (double) x[1] + x[2] * x[2] * pow(x[2] - 0.1e1, 0.2e1) / 0.3e1) * (double) (x[0] * x[0]) + (double) x[1] * ((-0.2e1 * pow(x[2], 0.3e1) + pow(x[2], 0.4e1) + 0.2e1 * x[2] * x[2] - x[2] + 0.1e1 / 0.6e1) * (double) (x[1] * x[1]) + (-pow(x[2], 0.4e1) / 0.2e1 + pow(x[2], 0.3e1) - 0.5e1 / 0.2e1 * x[2] * x[2] + 0.2e1 * x[2] - 0.1e1 / 0.3e1) * (double) x[1] - pow(x[2], 0.4e1) / 0.3e1 + 0.2e1 / 0.3e1 * pow(x[2], 0.3e1) + 0.2e1 / 0.3e1 * x[2] * x[2] - x[2] + 0.1e1 / 0.6e1) * (double) x[0] / 0.2e1 - (double) (x[1] - 1) * pow(x[2] - 0.1e1, 0.2e1) * ((double) (x[1] * x[1]) - (double) x[1] / 0.3e1 - 0.1e1 / 0.3e1) * x[2] * x[2] / 0.4e1)) * AmpliR * mu * pow(-Amplirho * tanh(gammarho * (x[2] - 0.5e0)) + 0.2e1 * rhol - Amplirho, -0.3e1)
)+AmpliP*x[0]*x[1]""", "0.0","0.0"),AmpliR=AmpliR,AmpliP=AmpliP,rhol=rhol,Amplirho=Amplirho,gammarho=gammarho,mu=mu, degree=degree)
    forcetot=Function(V)
    forcetot.interpolate(forceexpr)
    force12,forcep,forcel=forcetot.split()
    #--------------------VARIATIONAL PROBLEM---------------------
    #--------------------WEAK FORM--------------------- 
    A_tot = (2*mu*(inner(epsilon(u_r), epsilon(v_r))-(facto_dimens)*inner(div(u_r),div(v_r))) - inner(p_r,div(v_r)) + inner(div(rho*u_r),q_r))*dx+deltas*h*h*inner(grad(p_r),rho*grad(q_r))*dx+inner(p_r,mu_r)*dx+inner(lambda_r,q_r)*dx
    L = inner(force12, v_r)*dx+deltas*h*h*inner(force12,rho*grad(q_r))*dx
    #--------------------Compute SOLUTION---------------------
    u1=ComputeSolution(N,A_tot,L,bcs,V)
    (um, pm,lambdam) = u1.split(True)
    if(savefiles==1):
        # Save solutions in PVD format
        ufile_pvd = File("stokesfenics/velocityN"+str(N)+"rhov"+str(Amplirho)+"gamma"+str(gammarho)+".pvd")
        ufile_pvd << um
        pfile_pvd = File("stokesfenics/pressureN"+str(N)+"rhov"+str(Amplirho)+"gamma"+str(gammarho)+".pvd")
        pfile_pvd << pm
        ffile_pvd = File("stokesfenics/forceN"+str(N)+"rhov"+str(Amplirho)+"gamma"+str(gammarho)+".pvd")
        ffile_pvd << force12
        rhofile_pvd = File("stokesfenics/rhoN"+str(N)+"rhov"+str(Amplirho)+"gamma"+str(gammarho)+".pvd")
        rhofile_pvd << rho
    gc.collect() #free memory at maximum
    del gc.garbage[:]
    gc.collect()
    print(" | | | Error computation session:")
    print(" | | | Degree rise when computing error: %.15g" % degree_int)
    uexact_E=Expression(("((-2 * (x[2] - 1) * (-x[2] + x[1]) * x[0] * x[0] * x[2] * (2 * x[1] * x[2] - x[1] - x[2] + 1) * pow((double) (x[0] - 1), (double) 2) * (x[1] - 1) * x[1] * AmpliR)/((rhol-Amplirho*(0.5*tanh(gammarho*(x[2]-0.5))+0.5))))","((2 * (2 * x[0] * x[2] - x[0] - x[2] + 1) * (x[2] - 1) * (-x[2] + x[0]) * x[0] * x[2] * (x[0] - 1) * pow((double) (x[1] - 1), (double) 2) * x[1] * x[1] * AmpliR)/(rhol-Amplirho*(0.5*tanh(gammarho*(x[2]-0.5))+0.5)))","((-2 * (-x[1] + x[0]) * pow((double) (x[2] - 1), (double) 2) * x[0] * x[2] * x[2] * (x[0] - 1) * (x[1] - 1) * (2 * x[0] * x[1] - x[0] - x[1] + 1) * x[1] * AmpliR)/(rhol-Amplirho*(0.5*tanh(gammarho*(x[2]-0.5))+0.5)))"),AmpliR=AmpliR,rhol=rhol,Amplirho=Amplirho,gammarho=gammarho,degree=degree)
    pexact_E=Expression(("AmpliP*(x[0]*x[1]*x[2]-0.125)"),AmpliP=AmpliP,degree=degree)
    #forceL2=norm(force12,'L2')
    perrorL2=errornorm(pexact_E,pm,'L2', degree_rise=degree_int)
    print(" | | | Error in L2 norm pressure: %.15g" % perrorL2)
    uerrorL2=errornorm(uexact_E,um,'L2', degree_rise=degree_int)
    print(" | | | Error in L2 norm velocity: %.15g" % uerrorL2)
    uerrorH1=errornorm(uexact_E,um,norm_type = 'H10',degree_rise=degree_int)
    print(" | | | Error in H1 seminorm velocity: %.15g" % uerrorH1)
    uerrorH1B=errornorm(uexact_E,um,norm_type = 'H1',degree_rise=degree_int)
    print(" | | | Error in H1 full norm velocity: %.15g" % uerrorH1B)
    if(displayexact==1):
        #Pointwise saving of the error
        uerror=Function(V)
        uexact_tot=Function(V)
        uexactex_E=Expression(("((-2 * (x[2] - 1) * (-x[2] + x[1]) * x[0] * x[0] * x[2] * (2 * x[1] * x[2] - x[1] - x[2] + 1) * pow((double) (x[0] - 1), (double) 2) * (x[1] - 1) * x[1] * AmpliR)/((rhol-Amplirho*(0.5*tanh(gammarho*(x[2]-0.5))+0.5))))-um1","((2 * (2 * x[0] * x[2] - x[0] - x[2] + 1) * (x[2] - 1) * (-x[2] + x[0]) * x[0] * x[2] * (x[0] - 1) * pow((double) (x[1] - 1), (double) 2) * x[1] * x[1] * AmpliR)/(rhol-Amplirho*(0.5*tanh(gammarho*(x[2]-0.5))+0.5)))-um2","((-2 * (-x[1] + x[0]) * pow((double) (x[2] - 1), (double) 2) * x[0] * x[2] * x[2] * (x[0] - 1) * (x[1] - 1) * (2 * x[0] * x[1] - x[0] - x[1] + 1) * x[1] * AmpliR)/(rhol-Amplirho*(0.5*tanh(gammarho*(x[2]-0.5))+0.5)))-um3","AmpliP*(x[0]*x[1]*x[2]-0.125)-pm","0.0"),AmpliR=AmpliR,rhol=rhol,Amplirho=Amplirho,gammarho=gammarho,um1=um.sub(0),um2=um.sub(1),um3=um.sub(2),AmpliP=AmpliP,pm=pm,degree=degree)
        uexactot_E=Expression(("((-2 * (x[2] - 1) * (-x[2] + x[1]) * x[0] * x[0] * x[2] * (2 * x[1] * x[2] - x[1] - x[2] + 1) *pow((double) (x[0] - 1), (double) 2) * (x[1] - 1) * x[1] * AmpliR)/((rhol-Amplirho*(0.5*tanh(gammarho*(x[2]-0.5))+0.5))))","((2 * (2 * x[0] * x[2] - x[0] - x[2] + 1) * (x[2] - 1) * (-x[2] + x[0]) * x[0] * x[2] * (x[0] - 1) *pow((double) (x[1] - 1), (double) 2) * x[1] * x[1] * AmpliR)/(rhol-Amplirho*(0.5*tanh(gammarho*(x[2]-0.5))+0.5)))","((-2 * (-x[1] + x[0]) * pow((double) (x[2] - 1), (double) 2) * x[0] * x[2] * x[2] * (x[0] - 1) * (x[1] - 1) * (2 * x[0] * x[1] - x[0] - x[1] + 1) * x[1] * AmpliR)/(rhol-Amplirho*(0.5*tanh(gammarho*(x[2]-0.5))+0.5)))","AmpliP*(x[0]*x[1]*x[2]-0.125)-pm","0.0"),AmpliR=AmpliR,rhol=rhol,Amplirho=Amplirho,gammarho=gammarho,AmpliP=AmpliP,degree=degree)
        uexact_tot.interpolate(uexactot_E)
        uerror.interpolate(uexactex_E)
        umerr,perr,lerr=uerror.split()
        umex,pex,lex=uexact_tot.split()
        if(savefiles==1):
            lfile_pvd = File("stokesfenics/velocityerror"+str(N)+"rhov"+str(Amplirho)+"gamma"+str(gammarho)+".pvd")
            lfile_pvd << umerr
            perfile_pvd = File("stokesfenics/pressureerror"+str(N)+"rhov"+str(Amplirho)+"gamma"+str(gammarho)+".pvd")
            perfile_pvd << perr
            uexfile_pvd = File("stokesfenics/velocityexact"+str(N)+"rhov"+str(Amplirho)+"gamma"+str(gammarho)+".pvd")
            uexfile_pvd<<umex
            uexfile_pvd = File("stokesfenics/pressureexact"+str(N)+"rhov"+str(Amplirho)+"gamma"+str(gammarho)+".pvd")
            uexfile_pvd<<pex
    # Plot solution
    if(plotopt==1):
        #Pression
        plt.figure()
        fig1=plot(pm,scale = 2.0, title = "Plot of the pressure" )
        plt.colorbar(fig1)
        plt.savefig("stokesfenics/Images/pressureN"+str(N)+"rhov"+str(Amplirho)+"gamma"+str(gammarho)+".png")
        #Velocity
        plt.figure()
        fig2=plot(um,scale = 2.0, title = "Plot of the velocity" )
        plt.colorbar(fig2)
        plt.savefig("stokesfenics/Images/velocityN"+str(N)+"rhov"+str(Amplirho)+"gamma"+str(gammarho)+".png")
        #plt.show()
    return uerrorL2,perrorL2,uerrorH1
        
    #pdb.set_trace()
#Boucle for convergence
Amplirho=0.5;
gamma=10.0;
Maxconv=3;
MinvalueN=10;
uL2=np.zeros(Maxconv);
uH1=np.zeros(Maxconv);
pL2=np.zeros(Maxconv);
#Make the required folders to save data if not existing
if not os.path.exists('stokesfenics'):
    os.makedirs('stokesfenics')
    print("Folder stokesfenics juste created.")
if not os.path.exists('stokesfenics/Images'):
    os.makedirs('stokesfenics/Images')
    print("Folder stokesfenics/Images juste created.")
#Choice of N-vector, vector filled with different N values.
Nexp=np.arange(Maxconv);
Nvector=np.array(MinvalueN*(pow(2,(Maxconv-1-Nexp)*0.5)),dtype=int)
parameters["form_compiler"]["optimize"] = True
parameters['form_compiler']['cpp_optimize'] = True
dolfin.parameters["form_compiler"]["representation"] = 'uflacs'
for kk in range (0,Maxconv):
    saveparam=0;
    if(kk==1):
        saveparam=1;
    if(kk==5):
        saveparam=1;
    if(kk==Maxconv-1):
        saveparam=1;
    uL2[kk],pL2[kk],uH1[kk]=Compute_StokesSolution3D(Nvector[kk],order=1,AmpliP=1,Amplirho=Amplirho,savefiles=saveparam,gammarho=gamma,degree_int=3);
pdb.set_trace()
